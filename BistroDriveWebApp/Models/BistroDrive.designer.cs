#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BistroDriveWebApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DataBase")]
	public partial class BistroDriveDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAspNetRole(AspNetRole instance);
    partial void UpdateAspNetRole(AspNetRole instance);
    partial void DeleteAspNetRole(AspNetRole instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertAspNetUserClaim(AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(AspNetUserLogin instance);
    partial void InsertAspNetUserRole(AspNetUserRole instance);
    partial void UpdateAspNetUserRole(AspNetUserRole instance);
    partial void DeleteAspNetUserRole(AspNetUserRole instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InsertChatMessage(ChatMessage instance);
    partial void UpdateChatMessage(ChatMessage instance);
    partial void DeleteChatMessage(ChatMessage instance);
    partial void InsertDish(Dish instance);
    partial void UpdateDish(Dish instance);
    partial void DeleteDish(Dish instance);
    partial void InsertDishReview(DishReview instance);
    partial void UpdateDishReview(DishReview instance);
    partial void DeleteDishReview(DishReview instance);
    partial void InsertDishType(DishType instance);
    partial void UpdateDishType(DishType instance);
    partial void DeleteDishType(DishType instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderContactMethod(OrderContactMethod instance);
    partial void UpdateOrderContactMethod(OrderContactMethod instance);
    partial void DeleteOrderContactMethod(OrderContactMethod instance);
    partial void InsertOrderDelivery(OrderDelivery instance);
    partial void UpdateOrderDelivery(OrderDelivery instance);
    partial void DeleteOrderDelivery(OrderDelivery instance);
    partial void InsertOrderPaymentMethod(OrderPaymentMethod instance);
    partial void UpdateOrderPaymentMethod(OrderPaymentMethod instance);
    partial void DeleteOrderPaymentMethod(OrderPaymentMethod instance);
    partial void InsertOrderProduct(OrderProduct instance);
    partial void UpdateOrderProduct(OrderProduct instance);
    partial void DeleteOrderProduct(OrderProduct instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    #endregion
		
		public BistroDriveDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataBaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BistroDriveDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BistroDriveDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BistroDriveDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BistroDriveDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<ChatMessage> ChatMessages
		{
			get
			{
				return this.GetTable<ChatMessage>();
			}
		}
		
		public System.Data.Linq.Table<Dish> Dishes
		{
			get
			{
				return this.GetTable<Dish>();
			}
		}
		
		public System.Data.Linq.Table<DishReview> DishReviews
		{
			get
			{
				return this.GetTable<DishReview>();
			}
		}
		
		public System.Data.Linq.Table<DishType> DishTypes
		{
			get
			{
				return this.GetTable<DishType>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderContactMethod> OrderContactMethods
		{
			get
			{
				return this.GetTable<OrderContactMethod>();
			}
		}
		
		public System.Data.Linq.Table<OrderDelivery> OrderDeliveries
		{
			get
			{
				return this.GetTable<OrderDelivery>();
			}
		}
		
		public System.Data.Linq.Table<OrderPaymentMethod> OrderPaymentMethods
		{
			get
			{
				return this.GetTable<OrderPaymentMethod>();
			}
		}
		
		public System.Data.Linq.Table<OrderProduct> OrderProducts
		{
			get
			{
				return this.GetTable<OrderProduct>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<Review> _Reviews;
		
		private EntitySet<Review> _Reviews1;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
		private EntitySet<ChatMessage> _ChatMessages;
		
		private EntitySet<ChatMessage> _ChatMessages1;
		
		private EntitySet<Dish> _Dishes;
		
		private EntitySet<DishReview> _DishReviews;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			this._Reviews1 = new EntitySet<Review>(new Action<Review>(this.attach_Reviews1), new Action<Review>(this.detach_Reviews1));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			this._ChatMessages = new EntitySet<ChatMessage>(new Action<ChatMessage>(this.attach_ChatMessages), new Action<ChatMessage>(this.detach_ChatMessages));
			this._ChatMessages1 = new EntitySet<ChatMessage>(new Action<ChatMessage>(this.attach_ChatMessages1), new Action<ChatMessage>(this.detach_ChatMessages1));
			this._Dishes = new EntitySet<Dish>(new Action<Dish>(this.attach_Dishes), new Action<Dish>(this.detach_Dishes));
			this._DishReviews = new EntitySet<DishReview>(new Action<DishReview>(this.attach_DishReviews), new Action<DishReview>(this.detach_DishReviews));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Review", Storage="_Reviews", ThisKey="Id", OtherKey="Id_Owner")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Review1", Storage="_Reviews1", ThisKey="Id", OtherKey="Id_User")]
		public EntitySet<Review> Reviews1
		{
			get
			{
				return this._Reviews1;
			}
			set
			{
				this._Reviews1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_ChatMessage", Storage="_ChatMessages", ThisKey="Id", OtherKey="Id_Reciver")]
		public EntitySet<ChatMessage> ChatMessages
		{
			get
			{
				return this._ChatMessages;
			}
			set
			{
				this._ChatMessages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_ChatMessage1", Storage="_ChatMessages1", ThisKey="Id", OtherKey="Id_Sender")]
		public EntitySet<ChatMessage> ChatMessages1
		{
			get
			{
				return this._ChatMessages1;
			}
			set
			{
				this._ChatMessages1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Dish", Storage="_Dishes", ThisKey="Id", OtherKey="Id_User")]
		public EntitySet<Dish> Dishes
		{
			get
			{
				return this._Dishes;
			}
			set
			{
				this._Dishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_DishReview", Storage="_DishReviews", ThisKey="Id", OtherKey="Id_Owner")]
		public EntitySet<DishReview> DishReviews
		{
			get
			{
				return this._DishReviews;
			}
			set
			{
				this._DishReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Order", Storage="_Orders", ThisKey="Id", OtherKey="Id_Cook")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
		
		private void attach_Reviews1(Review entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole1 = this;
		}
		
		private void detach_Reviews1(Review entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole1 = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
		
		private void attach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_ChatMessages(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
		
		private void attach_ChatMessages1(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole1 = this;
		}
		
		private void detach_ChatMessages1(ChatMessage entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole1 = null;
		}
		
		private void attach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
		
		private void attach_DishReviews(DishReview entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_DishReviews(DishReview entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_UserReview;
		
		private string _Id_User;
		
		private string _Id_Owner;
		
		private string _Text;
		
		private string _Mark;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetRole> _AspNetRole1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_UserReviewChanging(int value);
    partial void OnId_UserReviewChanged();
    partial void OnId_UserChanging(string value);
    partial void OnId_UserChanged();
    partial void OnId_OwnerChanging(string value);
    partial void OnId_OwnerChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnMarkChanging(string value);
    partial void OnMarkChanged();
    #endregion
		
		public Review()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetRole1 = default(EntityRef<AspNetRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_UserReview", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_UserReview
		{
			get
			{
				return this._Id_UserReview;
			}
			set
			{
				if ((this._Id_UserReview != value))
				{
					this.OnId_UserReviewChanging(value);
					this.SendPropertyChanging();
					this._Id_UserReview = value;
					this.SendPropertyChanged("Id_UserReview");
					this.OnId_UserReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_User", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_User
		{
			get
			{
				return this._Id_User;
			}
			set
			{
				if ((this._Id_User != value))
				{
					if (this._AspNetRole1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_UserChanging(value);
					this.SendPropertyChanging();
					this._Id_User = value;
					this.SendPropertyChanged("Id_User");
					this.OnId_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Owner", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_Owner
		{
			get
			{
				return this._Id_Owner;
			}
			set
			{
				if ((this._Id_Owner != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_OwnerChanging(value);
					this.SendPropertyChanging();
					this._Id_Owner = value;
					this.SendPropertyChanged("Id_Owner");
					this.OnId_OwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="NChar(10)")]
		public string Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Review", Storage="_AspNetRole", ThisKey="Id_Owner", OtherKey="Id", IsForeignKey=true)]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._Id_Owner = value.Id;
					}
					else
					{
						this._Id_Owner = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Review1", Storage="_AspNetRole1", ThisKey="Id_User", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole1
		{
			get
			{
				return this._AspNetRole1.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole1.Entity = null;
						previousValue.Reviews1.Remove(this);
					}
					this._AspNetRole1.Entity = value;
					if ((value != null))
					{
						value.Reviews1.Add(this);
						this._Id_User = value.Id;
					}
					else
					{
						this._Id_User = default(string);
					}
					this.SendPropertyChanged("AspNetRole1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private string _Address;
		
		private string _Avatar_Url;
		
		private System.Nullable<System.DateTime> _LastOnlineTime;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAvatar_UrlChanging(string value);
    partial void OnAvatar_UrlChanged();
    partial void OnLastOnlineTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastOnlineTimeChanged();
    #endregion
		
		public AspNetUser()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(256)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar_Url", DbType="NVarChar(128)")]
		public string Avatar_Url
		{
			get
			{
				return this._Avatar_Url;
			}
			set
			{
				if ((this._Avatar_Url != value))
				{
					this.OnAvatar_UrlChanging(value);
					this.SendPropertyChanging();
					this._Avatar_Url = value;
					this.SendPropertyChanged("Avatar_Url");
					this.OnAvatar_UrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastOnlineTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastOnlineTime
		{
			get
			{
				return this._LastOnlineTime;
			}
			set
			{
				if ((this._LastOnlineTime != value))
				{
					this.OnLastOnlineTimeChanging(value);
					this.SendPropertyChanging();
					this._LastOnlineTime = value;
					this.SendPropertyChanged("LastOnlineTime");
					this.OnLastOnlineTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatMessage")]
	public partial class ChatMessage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Message;
		
		private string _Id_Sender;
		
		private string _Id_Reciver;
		
		private string _Message;
		
		private System.Nullable<System.DateTime> _CreateTime;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetRole> _AspNetRole1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_MessageChanging(int value);
    partial void OnId_MessageChanged();
    partial void OnId_SenderChanging(string value);
    partial void OnId_SenderChanged();
    partial void OnId_ReciverChanging(string value);
    partial void OnId_ReciverChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCreateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateTimeChanged();
    #endregion
		
		public ChatMessage()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetRole1 = default(EntityRef<AspNetRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Message", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Message
		{
			get
			{
				return this._Id_Message;
			}
			set
			{
				if ((this._Id_Message != value))
				{
					this.OnId_MessageChanging(value);
					this.SendPropertyChanging();
					this._Id_Message = value;
					this.SendPropertyChanged("Id_Message");
					this.OnId_MessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Sender", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_Sender
		{
			get
			{
				return this._Id_Sender;
			}
			set
			{
				if ((this._Id_Sender != value))
				{
					if (this._AspNetRole1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_SenderChanging(value);
					this.SendPropertyChanging();
					this._Id_Sender = value;
					this.SendPropertyChanged("Id_Sender");
					this.OnId_SenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Reciver", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_Reciver
		{
			get
			{
				return this._Id_Reciver;
			}
			set
			{
				if ((this._Id_Reciver != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ReciverChanging(value);
					this.SendPropertyChanging();
					this._Id_Reciver = value;
					this.SendPropertyChanged("Id_Reciver");
					this.OnId_ReciverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_ChatMessage", Storage="_AspNetRole", ThisKey="Id_Reciver", OtherKey="Id", IsForeignKey=true)]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.ChatMessages.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.ChatMessages.Add(this);
						this._Id_Reciver = value.Id;
					}
					else
					{
						this._Id_Reciver = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_ChatMessage1", Storage="_AspNetRole1", ThisKey="Id_Sender", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole1
		{
			get
			{
				return this._AspNetRole1.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole1.Entity = null;
						previousValue.ChatMessages1.Remove(this);
					}
					this._AspNetRole1.Entity = value;
					if ((value != null))
					{
						value.ChatMessages1.Add(this);
						this._Id_Sender = value.Id;
					}
					else
					{
						this._Id_Sender = default(string);
					}
					this.SendPropertyChanged("AspNetRole1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dish")]
	public partial class Dish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Dish;
		
		private string _Id_User;
		
		private string _Description;
		
		private decimal _Price;
		
		private decimal _PriceWithIngridient;
		
		private string _ImageUrl;
		
		private int _Id_Type;
		
		private EntitySet<DishReview> _DishReviews;
		
		private EntitySet<OrderProduct> _OrderProducts;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<DishType> _DishType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_DishChanging(int value);
    partial void OnId_DishChanged();
    partial void OnId_UserChanging(string value);
    partial void OnId_UserChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPriceWithIngridientChanging(decimal value);
    partial void OnPriceWithIngridientChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnId_TypeChanging(int value);
    partial void OnId_TypeChanged();
    #endregion
		
		public Dish()
		{
			this._DishReviews = new EntitySet<DishReview>(new Action<DishReview>(this.attach_DishReviews), new Action<DishReview>(this.detach_DishReviews));
			this._OrderProducts = new EntitySet<OrderProduct>(new Action<OrderProduct>(this.attach_OrderProducts), new Action<OrderProduct>(this.detach_OrderProducts));
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._DishType = default(EntityRef<DishType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Dish", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Dish
		{
			get
			{
				return this._Id_Dish;
			}
			set
			{
				if ((this._Id_Dish != value))
				{
					this.OnId_DishChanging(value);
					this.SendPropertyChanging();
					this._Id_Dish = value;
					this.SendPropertyChanged("Id_Dish");
					this.OnId_DishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_User", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_User
		{
			get
			{
				return this._Id_User;
			}
			set
			{
				if ((this._Id_User != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_UserChanging(value);
					this.SendPropertyChanging();
					this._Id_User = value;
					this.SendPropertyChanged("Id_User");
					this.OnId_UserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceWithIngridient", DbType="Decimal(10,2) NOT NULL")]
		public decimal PriceWithIngridient
		{
			get
			{
				return this._PriceWithIngridient;
			}
			set
			{
				if ((this._PriceWithIngridient != value))
				{
					this.OnPriceWithIngridientChanging(value);
					this.SendPropertyChanging();
					this._PriceWithIngridient = value;
					this.SendPropertyChanged("PriceWithIngridient");
					this.OnPriceWithIngridientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrl", DbType="NVarChar(128)")]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Type", DbType="Int NOT NULL")]
		public int Id_Type
		{
			get
			{
				return this._Id_Type;
			}
			set
			{
				if ((this._Id_Type != value))
				{
					if (this._DishType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_TypeChanging(value);
					this.SendPropertyChanging();
					this._Id_Type = value;
					this.SendPropertyChanged("Id_Type");
					this.OnId_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishReview", Storage="_DishReviews", ThisKey="Id_Dish", OtherKey="Id_Dish")]
		public EntitySet<DishReview> DishReviews
		{
			get
			{
				return this._DishReviews;
			}
			set
			{
				this._DishReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_OrderProduct", Storage="_OrderProducts", ThisKey="Id_Dish", OtherKey="Id_Dish")]
		public EntitySet<OrderProduct> OrderProducts
		{
			get
			{
				return this._OrderProducts;
			}
			set
			{
				this._OrderProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Dish", Storage="_AspNetRole", ThisKey="Id_User", OtherKey="Id", IsForeignKey=true)]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.Dishes.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.Dishes.Add(this);
						this._Id_User = value.Id;
					}
					else
					{
						this._Id_User = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DishType_Dish", Storage="_DishType", ThisKey="Id_Type", OtherKey="Id_DishType", IsForeignKey=true)]
		public DishType DishType
		{
			get
			{
				return this._DishType.Entity;
			}
			set
			{
				DishType previousValue = this._DishType.Entity;
				if (((previousValue != value) 
							|| (this._DishType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DishType.Entity = null;
						previousValue.Dishes.Remove(this);
					}
					this._DishType.Entity = value;
					if ((value != null))
					{
						value.Dishes.Add(this);
						this._Id_Type = value.Id_DishType;
					}
					else
					{
						this._Id_Type = default(int);
					}
					this.SendPropertyChanged("DishType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DishReviews(DishReview entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_DishReviews(DishReview entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
		
		private void attach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Dish = this;
		}
		
		private void detach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Dish = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DishReview")]
	public partial class DishReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Review;
		
		private string _Id_Owner;
		
		private int _Id_Dish;
		
		private string _Description;
		
		private System.Nullable<int> _Mark;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ReviewChanging(int value);
    partial void OnId_ReviewChanged();
    partial void OnId_OwnerChanging(string value);
    partial void OnId_OwnerChanged();
    partial void OnId_DishChanging(int value);
    partial void OnId_DishChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMarkChanging(System.Nullable<int> value);
    partial void OnMarkChanged();
    #endregion
		
		public DishReview()
		{
			this._Dish = default(EntityRef<Dish>);
			this._AspNetRole = default(EntityRef<AspNetRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Review", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Review
		{
			get
			{
				return this._Id_Review;
			}
			set
			{
				if ((this._Id_Review != value))
				{
					this.OnId_ReviewChanging(value);
					this.SendPropertyChanging();
					this._Id_Review = value;
					this.SendPropertyChanged("Id_Review");
					this.OnId_ReviewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Owner", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_Owner
		{
			get
			{
				return this._Id_Owner;
			}
			set
			{
				if ((this._Id_Owner != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_OwnerChanging(value);
					this.SendPropertyChanging();
					this._Id_Owner = value;
					this.SendPropertyChanged("Id_Owner");
					this.OnId_OwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Dish", DbType="Int NOT NULL")]
		public int Id_Dish
		{
			get
			{
				return this._Id_Dish;
			}
			set
			{
				if ((this._Id_Dish != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DishChanging(value);
					this.SendPropertyChanging();
					this._Id_Dish = value;
					this.SendPropertyChanged("Id_Dish");
					this.OnId_DishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mark", DbType="Int")]
		public System.Nullable<int> Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_DishReview", Storage="_Dish", ThisKey="Id_Dish", OtherKey="Id_Dish", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.DishReviews.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.DishReviews.Add(this);
						this._Id_Dish = value.Id_Dish;
					}
					else
					{
						this._Id_Dish = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_DishReview", Storage="_AspNetRole", ThisKey="Id_Owner", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.DishReviews.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.DishReviews.Add(this);
						this._Id_Owner = value.Id;
					}
					else
					{
						this._Id_Owner = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DishType")]
	public partial class DishType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_DishType;
		
		private string _Name;
		
		private string _Descritpion;
		
		private string _Image_URL;
		
		private EntitySet<Dish> _Dishes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_DishTypeChanging(int value);
    partial void OnId_DishTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescritpionChanging(string value);
    partial void OnDescritpionChanged();
    partial void OnImage_URLChanging(string value);
    partial void OnImage_URLChanged();
    #endregion
		
		public DishType()
		{
			this._Dishes = new EntitySet<Dish>(new Action<Dish>(this.attach_Dishes), new Action<Dish>(this.detach_Dishes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_DishType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_DishType
		{
			get
			{
				return this._Id_DishType;
			}
			set
			{
				if ((this._Id_DishType != value))
				{
					this.OnId_DishTypeChanging(value);
					this.SendPropertyChanging();
					this._Id_DishType = value;
					this.SendPropertyChanged("Id_DishType");
					this.OnId_DishTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descritpion", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Descritpion
		{
			get
			{
				return this._Descritpion;
			}
			set
			{
				if ((this._Descritpion != value))
				{
					this.OnDescritpionChanging(value);
					this.SendPropertyChanging();
					this._Descritpion = value;
					this.SendPropertyChanged("Descritpion");
					this.OnDescritpionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_URL", DbType="NChar(128)")]
		public string Image_URL
		{
			get
			{
				return this._Image_URL;
			}
			set
			{
				if ((this._Image_URL != value))
				{
					this.OnImage_URLChanging(value);
					this.SendPropertyChanging();
					this._Image_URL = value;
					this.SendPropertyChanged("Image_URL");
					this.OnImage_URLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DishType_Dish", Storage="_Dishes", ThisKey="Id_DishType", OtherKey="Id_Type")]
		public EntitySet<Dish> Dishes
		{
			get
			{
				return this._Dishes;
			}
			set
			{
				this._Dishes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.DishType = this;
		}
		
		private void detach_Dishes(Dish entity)
		{
			this.SendPropertyChanging();
			entity.DishType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Order;
		
		private string _Id_Cook;
		
		private string _Id_Customer;
		
		private int _Id_Status;
		
		private System.DateTime _CreateTime;
		
		private System.Nullable<System.DateTime> _FinishTime;
		
		private System.DateTime _DeadLine;
		
		private int _Id_PaymentMethod;
		
		private int _Id_ContactMethod;
		
		private int _Id_Delivery;
		
		private EntitySet<OrderProduct> _OrderProducts;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<OrderContactMethod> _OrderContactMethod;
		
		private EntityRef<OrderDelivery> _OrderDelivery;
		
		private EntityRef<OrderPaymentMethod> _OrderPaymentMethod;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_OrderChanging(int value);
    partial void OnId_OrderChanged();
    partial void OnId_CookChanging(string value);
    partial void OnId_CookChanged();
    partial void OnId_CustomerChanging(string value);
    partial void OnId_CustomerChanged();
    partial void OnId_StatusChanging(int value);
    partial void OnId_StatusChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnFinishTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishTimeChanged();
    partial void OnDeadLineChanging(System.DateTime value);
    partial void OnDeadLineChanged();
    partial void OnId_PaymentMethodChanging(int value);
    partial void OnId_PaymentMethodChanged();
    partial void OnId_ContactMethodChanging(int value);
    partial void OnId_ContactMethodChanged();
    partial void OnId_DeliveryChanging(int value);
    partial void OnId_DeliveryChanged();
    #endregion
		
		public Order()
		{
			this._OrderProducts = new EntitySet<OrderProduct>(new Action<OrderProduct>(this.attach_OrderProducts), new Action<OrderProduct>(this.detach_OrderProducts));
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._OrderContactMethod = default(EntityRef<OrderContactMethod>);
			this._OrderDelivery = default(EntityRef<OrderDelivery>);
			this._OrderPaymentMethod = default(EntityRef<OrderPaymentMethod>);
			this._OrderStatus = default(EntityRef<OrderStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Order", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Order
		{
			get
			{
				return this._Id_Order;
			}
			set
			{
				if ((this._Id_Order != value))
				{
					this.OnId_OrderChanging(value);
					this.SendPropertyChanging();
					this._Id_Order = value;
					this.SendPropertyChanged("Id_Order");
					this.OnId_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Cook", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_Cook
		{
			get
			{
				return this._Id_Cook;
			}
			set
			{
				if ((this._Id_Cook != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_CookChanging(value);
					this.SendPropertyChanging();
					this._Id_Cook = value;
					this.SendPropertyChanged("Id_Cook");
					this.OnId_CookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Customer", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Id_Customer
		{
			get
			{
				return this._Id_Customer;
			}
			set
			{
				if ((this._Id_Customer != value))
				{
					this.OnId_CustomerChanging(value);
					this.SendPropertyChanging();
					this._Id_Customer = value;
					this.SendPropertyChanged("Id_Customer");
					this.OnId_CustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Status", DbType="Int NOT NULL")]
		public int Id_Status
		{
			get
			{
				return this._Id_Status;
			}
			set
			{
				if ((this._Id_Status != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_StatusChanging(value);
					this.SendPropertyChanging();
					this._Id_Status = value;
					this.SendPropertyChanged("Id_Status");
					this.OnId_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishTime
		{
			get
			{
				return this._FinishTime;
			}
			set
			{
				if ((this._FinishTime != value))
				{
					this.OnFinishTimeChanging(value);
					this.SendPropertyChanging();
					this._FinishTime = value;
					this.SendPropertyChanged("FinishTime");
					this.OnFinishTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeadLine", DbType="DateTime NOT NULL")]
		public System.DateTime DeadLine
		{
			get
			{
				return this._DeadLine;
			}
			set
			{
				if ((this._DeadLine != value))
				{
					this.OnDeadLineChanging(value);
					this.SendPropertyChanging();
					this._DeadLine = value;
					this.SendPropertyChanged("DeadLine");
					this.OnDeadLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_PaymentMethod", DbType="Int NOT NULL")]
		public int Id_PaymentMethod
		{
			get
			{
				return this._Id_PaymentMethod;
			}
			set
			{
				if ((this._Id_PaymentMethod != value))
				{
					if (this._OrderPaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_PaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._Id_PaymentMethod = value;
					this.SendPropertyChanged("Id_PaymentMethod");
					this.OnId_PaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_ContactMethod", DbType="Int NOT NULL")]
		public int Id_ContactMethod
		{
			get
			{
				return this._Id_ContactMethod;
			}
			set
			{
				if ((this._Id_ContactMethod != value))
				{
					if (this._OrderContactMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ContactMethodChanging(value);
					this.SendPropertyChanging();
					this._Id_ContactMethod = value;
					this.SendPropertyChanged("Id_ContactMethod");
					this.OnId_ContactMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Delivery", DbType="Int NOT NULL")]
		public int Id_Delivery
		{
			get
			{
				return this._Id_Delivery;
			}
			set
			{
				if ((this._Id_Delivery != value))
				{
					if (this._OrderDelivery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DeliveryChanging(value);
					this.SendPropertyChanging();
					this._Id_Delivery = value;
					this.SendPropertyChanged("Id_Delivery");
					this.OnId_DeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderProduct", Storage="_OrderProducts", ThisKey="Id_Order", OtherKey="Id_Order")]
		public EntitySet<OrderProduct> OrderProducts
		{
			get
			{
				return this._OrderProducts;
			}
			set
			{
				this._OrderProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_Order", Storage="_AspNetRole", ThisKey="Id_Cook", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Id_Cook = value.Id;
					}
					else
					{
						this._Id_Cook = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderContactMethod_Order", Storage="_OrderContactMethod", ThisKey="Id_ContactMethod", OtherKey="Id_ContactMethod", IsForeignKey=true)]
		public OrderContactMethod OrderContactMethod
		{
			get
			{
				return this._OrderContactMethod.Entity;
			}
			set
			{
				OrderContactMethod previousValue = this._OrderContactMethod.Entity;
				if (((previousValue != value) 
							|| (this._OrderContactMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderContactMethod.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderContactMethod.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Id_ContactMethod = value.Id_ContactMethod;
					}
					else
					{
						this._Id_ContactMethod = default(int);
					}
					this.SendPropertyChanged("OrderContactMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderDelivery_Order", Storage="_OrderDelivery", ThisKey="Id_Delivery", OtherKey="Id_Delivery", IsForeignKey=true)]
		public OrderDelivery OrderDelivery
		{
			get
			{
				return this._OrderDelivery.Entity;
			}
			set
			{
				OrderDelivery previousValue = this._OrderDelivery.Entity;
				if (((previousValue != value) 
							|| (this._OrderDelivery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderDelivery.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderDelivery.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Id_Delivery = value.Id_Delivery;
					}
					else
					{
						this._Id_Delivery = default(int);
					}
					this.SendPropertyChanged("OrderDelivery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderPaymentMethod_Order", Storage="_OrderPaymentMethod", ThisKey="Id_PaymentMethod", OtherKey="Id_PaymentMethod", IsForeignKey=true)]
		public OrderPaymentMethod OrderPaymentMethod
		{
			get
			{
				return this._OrderPaymentMethod.Entity;
			}
			set
			{
				OrderPaymentMethod previousValue = this._OrderPaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._OrderPaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderPaymentMethod.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderPaymentMethod.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Id_PaymentMethod = value.Id_PaymentMethod;
					}
					else
					{
						this._Id_PaymentMethod = default(int);
					}
					this.SendPropertyChanged("OrderPaymentMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_Order", Storage="_OrderStatus", ThisKey="Id_Status", OtherKey="Id_Status", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._Id_Status = value.Id_Status;
					}
					else
					{
						this._Id_Status = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderProducts(OrderProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderContactMethod")]
	public partial class OrderContactMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_ContactMethod;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ContactMethodChanging(int value);
    partial void OnId_ContactMethodChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public OrderContactMethod()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_ContactMethod", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_ContactMethod
		{
			get
			{
				return this._Id_ContactMethod;
			}
			set
			{
				if ((this._Id_ContactMethod != value))
				{
					this.OnId_ContactMethodChanging(value);
					this.SendPropertyChanging();
					this._Id_ContactMethod = value;
					this.SendPropertyChanged("Id_ContactMethod");
					this.OnId_ContactMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderContactMethod_Order", Storage="_Orders", ThisKey="Id_ContactMethod", OtherKey="Id_ContactMethod")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderContactMethod = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderContactMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDelivery")]
	public partial class OrderDelivery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Delivery;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_DeliveryChanging(int value);
    partial void OnId_DeliveryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public OrderDelivery()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Delivery", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Delivery
		{
			get
			{
				return this._Id_Delivery;
			}
			set
			{
				if ((this._Id_Delivery != value))
				{
					this.OnId_DeliveryChanging(value);
					this.SendPropertyChanging();
					this._Id_Delivery = value;
					this.SendPropertyChanged("Id_Delivery");
					this.OnId_DeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderDelivery_Order", Storage="_Orders", ThisKey="Id_Delivery", OtherKey="Id_Delivery")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderDelivery = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderDelivery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderPaymentMethod")]
	public partial class OrderPaymentMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_PaymentMethod;
		
		private string _Name;
		
		private string _Description;
		
		private string _PaymentProvider;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_PaymentMethodChanging(int value);
    partial void OnId_PaymentMethodChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPaymentProviderChanging(string value);
    partial void OnPaymentProviderChanged();
    #endregion
		
		public OrderPaymentMethod()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_PaymentMethod", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_PaymentMethod
		{
			get
			{
				return this._Id_PaymentMethod;
			}
			set
			{
				if ((this._Id_PaymentMethod != value))
				{
					this.OnId_PaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._Id_PaymentMethod = value;
					this.SendPropertyChanged("Id_PaymentMethod");
					this.OnId_PaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentProvider", DbType="VarChar(128)")]
		public string PaymentProvider
		{
			get
			{
				return this._PaymentProvider;
			}
			set
			{
				if ((this._PaymentProvider != value))
				{
					this.OnPaymentProviderChanging(value);
					this.SendPropertyChanging();
					this._PaymentProvider = value;
					this.SendPropertyChanged("PaymentProvider");
					this.OnPaymentProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderPaymentMethod_Order", Storage="_Orders", ThisKey="Id_PaymentMethod", OtherKey="Id_PaymentMethod")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderPaymentMethod = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderPaymentMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderProduct")]
	public partial class OrderProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Product;
		
		private int _Id_Dish;
		
		private int _Id_Order;
		
		private decimal _Price;
		
		private System.Nullable<decimal> _PriceWithIngridients;
		
		private EntityRef<Dish> _Dish;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ProductChanging(int value);
    partial void OnId_ProductChanged();
    partial void OnId_DishChanging(int value);
    partial void OnId_DishChanged();
    partial void OnId_OrderChanging(int value);
    partial void OnId_OrderChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnPriceWithIngridientsChanging(System.Nullable<decimal> value);
    partial void OnPriceWithIngridientsChanged();
    #endregion
		
		public OrderProduct()
		{
			this._Dish = default(EntityRef<Dish>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Product", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Product
		{
			get
			{
				return this._Id_Product;
			}
			set
			{
				if ((this._Id_Product != value))
				{
					this.OnId_ProductChanging(value);
					this.SendPropertyChanging();
					this._Id_Product = value;
					this.SendPropertyChanged("Id_Product");
					this.OnId_ProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Dish", DbType="Int NOT NULL")]
		public int Id_Dish
		{
			get
			{
				return this._Id_Dish;
			}
			set
			{
				if ((this._Id_Dish != value))
				{
					if (this._Dish.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DishChanging(value);
					this.SendPropertyChanging();
					this._Id_Dish = value;
					this.SendPropertyChanged("Id_Dish");
					this.OnId_DishChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Order", DbType="Int NOT NULL")]
		public int Id_Order
		{
			get
			{
				return this._Id_Order;
			}
			set
			{
				if ((this._Id_Order != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_OrderChanging(value);
					this.SendPropertyChanging();
					this._Id_Order = value;
					this.SendPropertyChanged("Id_Order");
					this.OnId_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriceWithIngridients", DbType="Decimal(10,2)")]
		public System.Nullable<decimal> PriceWithIngridients
		{
			get
			{
				return this._PriceWithIngridients;
			}
			set
			{
				if ((this._PriceWithIngridients != value))
				{
					this.OnPriceWithIngridientsChanging(value);
					this.SendPropertyChanging();
					this._PriceWithIngridients = value;
					this.SendPropertyChanged("PriceWithIngridients");
					this.OnPriceWithIngridientsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dish_OrderProduct", Storage="_Dish", ThisKey="Id_Dish", OtherKey="Id_Dish", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Dish Dish
		{
			get
			{
				return this._Dish.Entity;
			}
			set
			{
				Dish previousValue = this._Dish.Entity;
				if (((previousValue != value) 
							|| (this._Dish.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dish.Entity = null;
						previousValue.OrderProducts.Remove(this);
					}
					this._Dish.Entity = value;
					if ((value != null))
					{
						value.OrderProducts.Add(this);
						this._Id_Dish = value.Id_Dish;
					}
					else
					{
						this._Id_Dish = default(int);
					}
					this.SendPropertyChanged("Dish");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderProduct", Storage="_Order", ThisKey="Id_Order", OtherKey="Id_Order", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderProducts.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderProducts.Add(this);
						this._Id_Order = value.Id_Order;
					}
					else
					{
						this._Id_Order = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Status;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_StatusChanging(int value);
    partial void OnId_StatusChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Status", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Status
		{
			get
			{
				return this._Id_Status;
			}
			set
			{
				if ((this._Id_Status != value))
				{
					this.OnId_StatusChanging(value);
					this.SendPropertyChanging();
					this._Id_Status = value;
					this.SendPropertyChanged("Id_Status");
					this.OnId_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_Order", Storage="_Orders", ThisKey="Id_Status", OtherKey="Id_Status")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
}
#pragma warning restore 1591
